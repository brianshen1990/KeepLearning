/**
321. Create Maximum Number

You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.

Create the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.

Return an array of the k digits representing the answer.

 

Example 1:

Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5
Output: [9,8,6,5,3]
Example 2:

Input: nums1 = [6,7], nums2 = [6,0,4], k = 5
Output: [6,7,6,0,4]
Example 3:

Input: nums1 = [3,9], nums2 = [8,9], k = 3
Output: [9,8,9]
 

Constraints:

m == nums1.length
n == nums2.length
1 <= m, n <= 500
0 <= nums1[i], nums2[i] <= 9
1 <= k <= m + n
 

Follow up: Try to optimize your time and space complexity.
 */


/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @param {number} k
 * @return {number[]}
 */
 var maxNumber = function(nums1, nums2, k) {
    const helperGetMaxArray = (arr, len) => {
        let ret = new Array(len).fill(-1);
        
        let lastIndex = -1;
        for ( let i = 0 ; i < len ; i++ ) {
            // need len - i, 
            // so last index would be j + len - i - 1 < arr.length
            //  j < arr.length + i - len
            for ( let j = lastIndex + 1 ; j < arr.length + 1 + i - len ; j++ ) {
                if ( arr[j] > ret[i] ) {
                    ret[i] = arr[j];
                    lastIndex = j;
                }
            }
        }
        return ret.slice(0, len);
    }
    
    const helperMergeGreater = (arr1, index1, arr2, index2) => {
        while (index1 < arr1.length && index2 < arr2.length && arr1[index1] === arr2[index2]) {
            index1++;
            index2++;
        }
        if ( index2 === arr2.length ) {
            return true; // take index1 first, sample 123456 12345
        }
        if ( index1 < arr1.length && arr1[index1] > arr2[index2] ) {
            return true;  // nums1 > nums2 sample, 124 123
        }
        return false;
    }
    
    const helperMerge = ( arr1, arr2 ) => {
        let ret = [];
        let index1 = 0;
        let index2 = 0;
        while ( index1 < arr1.length && index2 < arr2.length ) {
            if (helperMergeGreater(arr1, index1, arr2, index2) ) {
                ret.push( arr1[index1++] );
            } else {
                ret.push( arr2[index2++] );
            }
        }
        while ( index1 < arr1.length ) {
            ret.push( arr1[index1++] );
        }
        while ( index2 < arr2.length ) {
            ret.push( arr2[index2++] );
        }
        return ret;
    }
    
    let retStr = new Array(k).fill(0).join("");
    for ( let i = 0 ; i <= k ; i++ ) {
        let len1 = i;
        let len2 = k - i;
        if ( len1 <= nums1.length && len2 <= nums2.length ) {
            let arr1 = helperGetMaxArray(nums1, len1);
            let arr2 = helperGetMaxArray(nums2, len2);
            let tempArr = helperMerge(arr1, arr2).join("");
            // console.log( arr1.join(","), "+", arr2.join(","), '=>', tempArr )
            if ( tempArr > retStr ) {
                retStr = tempArr;
            }
        }
    }
    
    return retStr.split("").map( item => parseInt(item) );
};


/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @param {number} k
 * @return {number[]}
 */
 var maxNumber_DP_Overtime = function(nums1, nums2, k) {
    
    const cache = {};
    
    const helper = ( index1, index2, n ) => {
        const strKey = `${index1}_${index2}_${n}`;
        
        if ( strKey in cache ) return cache[strKey];
        
        // total range we can get
        let keep = k - n;

        let end1 = nums1.length;
        let left2 = n - 1 - (nums2.length - index2);
        if ( left2 > 0 ) {
            end1 = end1 - left2;
        }
        // [index1, end1)
        
        let end2 = nums2.length;
        let left1 = n - 1 - (nums1.length - index1);
        if ( left1 > 0 ) {
            end2 = end2 - left1;
        }
        // [index2, end2)
        
        // [index1, end1), [index2, end2) find the first maximum
        let next1 = -1;
        let next2 = -1;
        let max = -1;
        for ( let i = index1 ; i < end1; i++ ) {
            if ( nums1[i] > max ) {
                max = nums1[i];
                next1 = i;
            }
        }
        for ( let i = index2 ; i < end2 ; i++ ) {
            if ( nums2[i] > max ) {
                max = nums2[i];
                next1 = -1;
                next2 = i;
            } else if ( nums2[i] === max && next2 === -1) {
                next2 = i;
            } 
        }
        if ( n === 1 ) {
            return [max];
        }
        
        
        let ret = [];
        if ( next1 !== -1 && next2 !== -1) {
            ret.push( helper( next1+1, index2, n-1 ) ); 
            ret.push( helper( index1, next2+1, n-1 ) ); 
            ret[0] = ret[0] > ret[1] ? ret[0] : ret[1];
            // only cache thing we need to decide
            cache[strKey] = [max, ...ret[0]];
        } else if ( next2 !== -1 ) {
            ret.push( helper( index1, next2+1, n-1 ) ); 
        } else if ( next1 !== -1  ) {
            ret.push( helper( next1 + 1, index2, n-1 ) ); 
        } 
        // console.log( `${index1}~${end1}, ${index2}~${end2}, len:${n}, ret: ${[max, ...ret[0]]}`)
        return [max, ...ret[0]];
    }
    
    return helper(0, 0, k);
};

/** 
[6,3,9,0,5,6]
[2,2,5,2,1,4,4,5,7,8,9,3,1,6,9,7,0]
23
[9,1,2,5,8,3]
[3,4,6,5]
5
[3,4,6,5]
[9,1,2,5,8,3]
5
[6,7]
[6,0,4]
5
[3,9]
[8,9]
3
[6,0]
[6,3]
4
[9,1,2,5,8,3]
[3,4,6,5]
10
[9,1,2,5,8,3]
[3,4,6,5]
1
[9,1,2,5,8,3,3,4,5,6,7,8,6,5,4,3,3,2,2,2,2,3,4,5,6,7,8,9,9,0]
[3,4,6,5]
16
[9]
[8]
1
[9]
[8]
2
[8,9]
[3,9]
3
[8,9,7,3,5,9,1,0,8,5,3,0,9,2,7,4,8,9,8,1,0,2,0,2,7,2,3,5,4,7,4,1,4,0,1,4,2,1,3,1,5,3,9,3,9,0,1,7,0,6,1,8,5,6,6,5,0,4,7,2,9,2,2,7,6,2,9,2,3,5,7,4,7,0,1,8,3,6,6,3,0,8,5,3,0,3,7,3,0,9,8,5,1,9,5,0,7,9,6,8,5,1,9,6,5,8,2,3,7,1,0,1,4,3,4,4,2,4,0,8,4,6,5,5,7,6,9,0,8,4,6,1,6,7,2,0,1,1,8,2,6,4,0,5,5,2,6,1,6,4,7,1,7,2,2,9,8,9,1,0,5,5,9,7,7,8,8,3,3,8,9,3,7,5,3,6,1,0,1,0,9,3,7,8,4,0,3,5,8,1,0,5,7,2,8,4,9,5,6,8,1,1,8,7,3,2,3,4,8,7,9,9,7,8,5,2,2,7,1,9,1,5,5,1,3,5,9,0,5,2,9,4,2,8,7,3,9,4,7,4,8,7,5,0,9,9,7,9,3,8,0,9,5,3,0,0,3,0,4,9,0,9,1,6,0,2,0,5,2,2,6,0,0,9,6,3,4,1,2,0,8,3,6,6,9,0,2,1,6,9,2,4,9,0,8,3,9,0,5,4,5,4,6,1,2,5,2,2,1,7,3,8,1,1,6,8,8,1,8,5,6,1,3,0,1,3,5,6,5,0,6,4,2,8,6,0,3,7,9,5,5,9,8,0,4,8,6,0,8,6,6,1,6,2,7,1,0,2,2,4,0,0,0,4,6,5,5,4,0,1,5,8,3,2,0,9,7,6,2,6,9,9,9,7,1,4,6,2,8,2,5,3,4,5,2,4,4,4,7,2,2,5,3,2,8,2,2,4,9,8,0,9,8,7,6,2,6,7,5,4,7,5,1,0,5,7,8,7,7,8,9,7,0,3,7,7,4,7,2,0,4,1,1,9,1,7,5,0,5,6,6,1,0,6,9,4,2,8,0,5,1,9,8,4,0,3,1,2,4,2,1,8,9,5,9,6,5,3,1,8,9,0,9,8,3,0,9,4,1,1,6,0,5,9,0,8,3,7,8,5]
[7,8,4,1,9,4,2,6,5,2,1,2,8,9,3,9,9,5,4,4,2,9,2,0,5,9,4,2,1,7,2,5,1,2,0,0,5,3,1,1,7,2,3,3,2,8,2,0,1,4,5,1,0,0,7,7,9,6,3,8,0,1,5,8,3,2,3,6,4,2,6,3,6,7,6,6,9,5,4,3,2,7,6,3,1,8,7,5,7,8,1,6,0,7,3,0,4,4,4,9,6,3,1,0,3,7,3,6,1,0,0,2,5,7,2,9,6,6,2,6,8,1,9,7,8,8,9,5,1,1,4,2,0,1,3,6,7,8,7,0,5,6,0,1,7,9,6,4,8,6,7,0,2,3,2,7,6,0,5,0,9,0,3,3,8,5,0,9,3,8,0,1,3,1,8,1,8,1,1,7,5,7,4,1,0,0,0,8,9,5,7,8,9,2,8,3,0,3,4,9,8,1,7,2,3,8,3,5,3,1,4,7,7,5,4,9,2,6,2,6,4,0,0,2,8,3,3,0,9,1,6,8,3,1,7,0,7,1,5,8,3,2,5,1,1,0,3,1,4,6,3,6,2,8,6,7,2,9,5,9,1,6,0,5,4,8,6,6,9,4,0,5,8,7,0,8,9,7,3,9,0,1,0,6,2,7,3,3,2,3,3,6,3,0,8,0,0,5,2,1,0,7,5,0,3,2,6,0,5,4,9,6,7,1,0,4,0,9,6,8,3,1,2,5,0,1,0,6,8,6,6,8,8,2,4,5,0,0,8,0,5,6,2,2,5,6,3,7,7,8,4,8,4,8,9,1,6,8,9,9,0,4,0,5,5,4,9,6,7,7,9,0,5,0,9,2,5,2,9,8,9,7,6,8,6,9,2,9,1,6,0,2,7,4,4,5,3,4,5,5,5,0,8,1,3,8,3,0,8,5,7,6,8,7,8,9,7,0,8,4,0,7,0,9,5,8,2,0,8,7,0,3,1,8,1,7,1,6,9,7,9,7,2,6,3,0,5,3,6,0,5,9,3,9,1,1,0,0,8,1,4,3,0,4,3,7,7,7,4,6,4,0,0,5,7,3,2,8,5,1,4,5,8,5,6,7,5,7,3,3,9,6,8,1,5,1,1,1,0,3]
500
[2,0,2,1,2,2,2,2,0,1,0,0,2,0,2,0,2,1,0,1,1,0,1,0,1,2,1,1,1,0,1,2,2,1,0,0,1,2,1,2,2,1,1,0,1,2,0,2,0,1,2,0,2,1,1,1,2,0,0,1,0,2,1,2,0,1,0,0,0,1,2,1,0,1,1,2,0,2,2,0,0,1,1,2,2,1,1,2,2,1,0,1,2,0,1,2,2,0,0,0,2,0,2,0,2,2,0,1,1,1,1,2,2,2,2,0,0,2,2,2,2,0,2,0,1,0,0,2,1,0,0,2,0,2,1,1,1,1,0,1,2,0,2,1,0,1,1,1,0,0,2,2,2,0,2,1,1,1,2,2,0,0,2,2,2,2,2,0,2,0,2,0,2,0,0,1,0,1,1,0,0,2,1,1,2,2,2,1,2,2,0,0,2,1,0,2,1,2,1,1,1,0,2,0,1,1,2,1,1,0,0,1,0,1,2,2,2,0,2,2,1,0,1,2,1,2,0,2,2,0,1,2,2,1,2,2,1,1,2,2,2,2,2,1,2,0,1,1,1,2,2,2,0,2,0,2,0,2,1,1,0,2,2,2,1,0,2,1,2,2,2,0,1,1,1,1,1,1,0,0,0,2,2,0,1,2,1,0,0,2,2,2,2,1,0,2,0,1,2,0]
[1,1,1,0,0,1,1,0,2,1,0,1,2,1,0,2,2,1,0,2,0,1,1,0,0,2,2,0,1,0,2,0,2,2,2,2,1,1,1,1,0,0,0,0,2,1,0,2,1,1,2,1,2,2,0,2,1,0,2,0,0,2,0,2,2,1,0,1,0,0,2,1,1,1,2,2,0,0,0,1,1,2,0,2,2,0,1,0,2,1,0,2,1,1,1,0,1,1,2,0,2,0,1,1,2,0,2,0,1,2,1,0,2,0,1,0,0,0,1,2,1,2,0,1,2,2,1,1,0,1,2,1,0,0,1,0,2,2,1,2,2,0,0,0,2,0,0,0,1,0,2,0,2,1,0,0,1,2,0,1,1,0,1,0,2,2,2,1,1,0,1,1,2,1,0,2,2,2,1,2,2,2,2,0,1,1,0,1,2,1,2,2,0,0,0,0,0,1,1,1,2,1,2,1,1,0,1,2,0,1,2,1,2,2,2,2,0,0,0,0,2,0,1,2,0,1,1,1,1,0,1,2,2,1,0,1,2,2,1,2,2,2,0,2,0,1,1,2,0,0,2,2,0,1,0,2,1,0,0,1,1,1,1,0,0,2,2,2,2,0,0,1,2,1,1,2,0,1,2,1,0,2,0,0,2,1,1,0,2,1,1,2,2,0,1,0,2,0,1,0]
600
[1,0,1,0,2,1,2,0,0,0,1,0,0,0,0,0,2,2,2,1,2,2,1,0,0,2,0,2,2,1,2,2,1,1,1,0,0,0,0,1,2,0,2,1,2,2,2,0,0,2,0,0,0,2,0,0,2,1,1,0,2,1,1,0,0,1,1,0,2,1,0,1,2,2,1,2,1,0,0,2,2,0,1,2,1,2,2,1,0,2,2,1,1,0,2,0,2,2,0,2,0,2,0,2,2,0,0,1,2,2,1,2,0,2,2,2,1,0,1,1,2,2,1,1,0,2,0,1,1,1,2,1,1,2,0,0,2,2,0,2,1,1,0,1,1,2,1,1,0,1,2,2,1,1,2,1,0,2,1,2,1,1,1,0,2,2,2,1,1,2,0,1,2,1,1,2,1,0,1,0,0,2,2,1,0,0,1,2,0,2,2,1,0,0,0,1,2,0,2,1,0,1,2,0,1,2,0,0,0,1,0,2,2,2,0,0,2,1,1,1,0,1,2,2,2,1,1,0,0,1,1,0,2,0,0,2,0,1,1,2,1,2,0,0,1,1,2,1,1,0,2,1,0,2,0,2,2,1,1,0,0,0,0,1,1,1,2,0,1,2,0,2,2,0,0,0,2,0,2,1,1,1,1,1,0,2,0,2,0,1,0,0,2,0,0,0,2,0,2,2,2,1,0,2,2,0,1,2,2,1,2,0,0,0,0,0,0,0,2,1,2,2,2,0,1,0,0,2,1,1,2,0,0,2,2,0,1,2,2,2,0,1,2,0,1,1,2,1,1,0,0,0,1,1,1,1,2,0,0,2,1,2,0,1,1,0,1,2,0,1,2,2,2,2,1,2,2,0,0,2,1,0,1,2,2,1,0,0,2,1,1,0,0,1,1,2,1,2,0,2,2,0,0,2,0,2,0,1,2,0,0,0,0,1,0,1,1,0,1,1,2,0,2,1,2,1,0,0,1,0,2,2,1,1,2,2,0,2,0,2,2,0,0,0,2,2,1,1,2,2,1,2,1,1,1,1,2,2,2,0,2,0,1,1,0,0,2,1,0,1,0,1,2,0,2,1,0,1,1,2,1,0,1,2,2,0,2,1,0,2,1,0,2,2,2,1,1,0,1,2]
[2,1,0,0,1,1,0,1,0,2,0,0,0,2,0,2,1,2,2,0,2,0,1,2,0,0,1,1,1,2,0,0,2,0,1,1,2,0,1,0,2,0,0,0,0,2,2,0,0,1,1,1,2,1,0,1,1,1,1,2,1,2,0,1,2,2,1,2,2,2,2,1,2,0,1,2,1,2,1,1,2,1,2,0,1,1,1,0,1,1,2,2,2,0,0,0,1,1,1,2,2,2,1,1,1,2,1,1,2,1,1,1,1,0,1,0,1,0,1,0,2,1,2,1,1,1,1,2,1,2,2,1,2,2,2,1,2,0,1,0,1,2,1,0,1,2,0,1,2,0,2,0,1,1,2,1,1,1,1,1,1,2,2,1,2,0,1,1,1,1,0,0,1,2,1,0,1,2,2,2,0,1,2,0,2,1,1,1,0,2,0,1,2,0,0,1,0,1,1,0,2,1,2,0,1,1,1,0,2,1,2,2,2,1,0,1,1,2,1,0,0,2,0,1,1,0,1,2,1,0,0,2,0,1,1,0,2,2,0,2,0,1,2,0,1,1,2,0,1,0,1,0,2,1,0,2,0,0,1,2,2,0,2,2,2,2,2,2,1,0,1,0,0,2,1,0,0,0,0,1,0,1,1,2,2,0,0,1,0,2,0,0,1,1,2,2,0,1,1,1,2,1,1,0,1,0,2,0,0,1,1,0,1,0,1,2,2,1,0,0,0,2,0,1,0,1,2,0,2,1,0,1,0,1,0,2,2,1,1,1,2,1,2,2,0,1,1,1,0,0,2,0,1,1,2,0,1,2,2,0,1,2,2,0,2,2,2,1,0,1,0,0,2,0,2,1,0,1,1,2,2,0,2,0,1,0,1,2,1,1,2,0,1,1,0,2,2,1,2,1,0,2,0,1,1,1,2,1,1,1,1,0,1,1,2,2,1,2,1,0,2,0,1,1,0,0,1,0,1,0,0,1,0,0,1,2,2,1,0,2,1,0,2,1,0,0,0,1,1,0,0,2,0,0,0,0,0,1,2,0,0,1,0,0,1,0,2,0,2,0,0,1,1,0,1,0,0,1,1,0,0,0,2,2,1,1,0,1,2,2,0,1,0,1,1,2,1,0,1,0]
1000
*/